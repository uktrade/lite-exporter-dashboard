# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret = "%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs = "en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = INFO

# Logger provided to your application:
logger.application = DEBUG

## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  enabled += modules.GuiceModule,
  enabled += "org.flywaydb.play.PlayModule"
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  #enabled += my.application.Module

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

pidfile.path = "/dev/null"

play.db {
  config = "db"
  default = "default"
  prototype {
    hikaricp.minimumIdle = 3
    hikaricp.maximumPoolSize = 3
  }
}

jpa.default = defaultPersistenceUnit

db {
  default.driver = org.sqlite.JDBC
  default.url = "jdbc:sqlite:localExport.db"
  default.user = ""
  default.password = ""
  default.jndiName = DefaultDS
  default.migration.auto = true
}

customerService {
  address = "http://customer-service.svc.dev.licensing.service.trade.gov.uk.test:80"
  timeout = 10000
}

permissionsService {
  address = "http://permissions-service.svc.dev.licensing.service.trade.gov.uk.test:80"
  timeout = 10000
}

ogelService {
  address = "http://ogel-service.svc.dev.licensing.service.trade.gov.uk.test:80"
  timeout = 10000
}

licenceApplication {
  address = "http://licence-application.app.dev.licensing.service.trade.gov.uk.test"
}

spireRelayService {
  enabled: false
  rabbitMqUrl = "amqp://guest:guest@localhost:5672"
  consumerQueueName = "spire-relay-queue"
  publisherQueueName = "dashboard-queue"
  consumerExchangeName = "spirerelay.publishToDashboard.exchange"
  publisherExchangeName = "spirerelay.consumeFromDashboard.exchange"
}

upload {
  folder = "C:\\Users\\yourusername\\uploadTestExport\\"
}

saml {
  metadataFile = "resource:saml/sample-metadata.xml"
  issuer = "http://localhost:9000/"
  callbackUrl = "http://localhost:9000/samlResponse"
}
