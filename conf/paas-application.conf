#Provides database config from the environment
play.application.loader = modules.common.PaasApplicationLoader

# Secret key
play.crypto.secret = ${PLAY_CRYPTO_SECRET}

# show full stack traces on error pages (should be disabled on production)
errorDetailEnabled = ${ERROR_DETAIL_ENABLED}

# The application languages
# ~~~~~
application.langs = "en"

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = INFO

# Logger provided to your application:
logger.application = DEBUG

## Modules
play.modules {
  enabled += modules.GuiceModule,
  enabled += "org.flywaydb.play.PlayModule"
}

play.filters {
  headers.contentSecurityPolicy = ${PLAY_FILTERS_HEADERS_CONTENT_SECURITY_POLICY}
  hosts.allowed = [${PLAY_FILTERS_HOSTS_ALLOWED}]
}

pidfile.path = "/dev/null"

play.db {
  config = "db"
  default = "default"
  prototype {
    hikaricp.minimumIdle = 3
    hikaricp.maximumPoolSize = 3
  }
}

jpa.default = defaultPersistenceUnit

db {
  default.driver = org.postgresql.Driver
  default.schema = ${DB_DEFAULT_SCHEMA}
  default.username = ${DB_DEFAULT_USERNAME}
  default.jndiName = DefaultDS
  default.migration.auto = true
}

customerService {
  address = ${CUSTOMER_SERVICE_ADDRESS}
  timeout = 10000
}

permissionsService {
  address = ${PERMISSIONS_SERVICE_ADDRESS}
  timeout = 10000
}

ogelService {
  address = ${OGEL_SERVICE_ADDRESS}
  timeout = 10000
  credentials = ${OGEL_SERVICE_CREDENTIALS}
}

licenceApplication {
  address = ${LICENCE_APPLICATION_ADDRESS}
}

userService {
  address = ${USER_SERVICE_ADDRESS}
  timeout = 10000
  cacheExpiryMinutes = 10
}

virusService {
  address = ${VIRUS_SERVICE_ADDRESS}
  credentials = ${VIRUS_SERVICE_CREDENTIALS}
  timeout = 10000
}

upload {
  validation {
    maxSize = ${UPLOAD_VALIDATION_MAX_SIZE}
    allowedExtensions = ${UPLOAD_VALIDATION_ALLOWED_EXTENSIONS}
  }
}

aws {
  credentials {
    profileName = ""
    accessKey = ${AWS_CREDENTIALS_ACCESS_KEY}
    secretKey = ${AWS_CREDENTIALS_SECRET_KEY}
  }
  region = ${AWS_REGION}
  bucketName = ${AWS_BUCKET_NAME}
  sqsQueueUrl = ${AWS_SQS_QUEUE_URL}
  sqsWaitTimeSeconds = ${AWS_SQS_WAIT_TIME_SECONDS}
  snsTopicArn = ${AWS_SNS_TOPIC_ARN}
}

saml {
  issuer = ${SAML_ISSUER}
  callbackUrl = ${SAML_CALLBACK_URL}
  location = ${SAML_LOCATION}
}

basicAuth {
  user = ${BASIC_AUTH_USER}
  password = ${BASIC_AUTH_PASSWORD}
  realm = ${BASIC_AUTH_REALM}
}

jwtSharedSecret = ${JWT_SHARED_SECRET}
